<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="CE-3.8.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

	<flow name="eventInquiryValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['ticketID'] != null]" />
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidationFlow" />
		<choice>
			<when expression="#[payload.status.message == 'SUCCESS']">
				<flow-ref name="eventDetailBPFlow" doc:name="Flow Reference" />
			</when>
			<otherwise>
				<logger level="INFO" message="[MEMBER NOT FOUND = #[payload]]" />
			</otherwise>
		</choice>
	</flow>

	<flow name="addEventValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['communityID'] != null]" />
				<expression-filter expression="#[originalPayload['eventName'] != null]" />
				<expression-filter expression="#[originalPayload['location'] != null]" />
				<expression-filter expression="#[originalPayload['description'] != null]" />
				<expression-filter expression="#[originalPayload['startDate'] != null]" />
				<expression-filter expression="#[originalPayload['endDate'] != null]" />
				<expression-filter expression="#[originalPayload['amount'] != null]" />
				<expression-filter expression="#[originalPayload['action'] != null]"/>
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidationFlow" />
		<choice>
			<when expression="#[payload.status.message == 'SUCCESS']">
				<logger level="INFO" message="[EVENT REGISTER = #[payload]]" />
				<flow-ref name="addEventBPFlow" />
			</when>
			<otherwise>
				<logger level="INFO" message="[EVENT REGISTER FAILED = #[payload]]" />
			</otherwise>
		</choice>
	</flow>

	<flow name="eventListValidationFlow">
		<set-payload value="#[flowVars['originalPayload']]" />
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['communityID'] != null]" />
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidationFlow" />
		<choice>
			<when expression="#[payload.status.message == 'SUCCESS']">
				<flow-ref name="eventListBPFlow" doc:name="Flow Reference" />
			</when>
			<otherwise>
				<logger level="INFO" message="[MEMBER NOT FOUND = #[payload]]" />
			</otherwise>
		</choice>
	</flow>

	<flow name="deleteEventValidationFlow">
		<set-payload value="#[flowVars['originalPayload']]" />
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['ticketID'] != null]" />
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidationFlow" />
		<choice>
			<when expression="#[payload.status.message == 'SUCCESS']">
				<flow-ref name="deleteEventBPFlow" doc:name="Flow Reference" />
			</when>
			<otherwise>
				<logger level="INFO" message="[MEMBER NOT FOUND = #[payload]]" />
			</otherwise>
		</choice>
	</flow>

	<flow name="editEventValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter>
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['eventID'] != null]" />
				<expression-filter expression="#[originalPayload['ticketID'] != null]" />
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidationFlow" />
		<choice>
			<when expression="#[payload.status.message == 'SUCCESS']">
				<flow-ref name="editEventBPFlow" />
			</when>
			<otherwise>
				<logger level="INFO" message="[EDIT EVENT FAILED = #[payload]]" />
			</otherwise>
		</choice>
	</flow>
</mule>
