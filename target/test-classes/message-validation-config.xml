<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

	<flow name="messageRegisterValidationFlow">
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['message'] != null]" />
				<expression-filter expression="#[originalPayload['communityID'] != null]"/>
				<expression-filter expression="#[originalPayload['communityName'] != null]"/>
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidationFlow" doc:name="Flow Reference" />
		<choice doc:name="Choice">
			<when expression="#[payload.status.message == 'SUCCESS']">
				<logger level="INFO" message="[ADD MESSAGE = #[payload]]"
					doc:name="Logger" />
				<flow-ref name="addMessageBPFlow" doc:name="Flow Reference" />
			</when>
			<otherwise>
				<logger level="INFO" message="[ADD MESSAGE FAILED = #[payload]]"
					doc:name="Logger" />
			</otherwise>
		</choice>
	</flow>

	<flow name="messageListValidationFlow">
		<set-payload value="#[flowVars['originalPayload']]"
			doc:name="Set Payload" />
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['communityID'] != null]"/>
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidationFlow" doc:name="Flow Reference" />
		<choice doc:name="Choice">
			<when expression="#[payload.status.message == 'SUCCESS']">
				<flow-ref name="messageListBPFlow" doc:name="Flow Reference" />
			</when>
			<otherwise>
				<logger level="INFO" message="[MESSAGE NOT FOUND = #[payload]]"
					doc:name="Logger" />
			</otherwise>
		</choice>
	</flow>

	<flow name="deleteMessageValidationFlow">
		<set-payload value="#[flowVars['originalPayload']]"
			doc:name="Set Payload" />
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<expression-filter expression="#[originalPayload['token'] != null]" />
		</message-filter>

		<flow-ref name="tokenValidationFlow" doc:name="Flow Reference" />
		<choice doc:name="Choice">
			<when expression="#[payload.status.message == 'SUCCESS']">
				<flow-ref name="deleteMessageBPFlow" doc:name="Flow Reference" />
			</when>
			<otherwise>
				<logger level="INFO" message="[MESSAGE NOT FOUND = #[payload]]"
					doc:name="Logger" />
			</otherwise>
		</choice>
	</flow>
	
	<flow name="unseenMessageValidationFlow">
		<set-payload value="#[flowVars['originalPayload']]"
			doc:name="Set Payload" />
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['communityID'] != null]"/>
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidationFlow" doc:name="Flow Reference" />
		<choice doc:name="Choice">
			<when expression="#[payload.status.message == 'SUCCESS']">
				<flow-ref name="unseenMessageBPFlow" doc:name="Flow Reference" />
			</when>
			<otherwise>
				<logger level="INFO" message="[MESSAGE NOT FOUND = #[payload]]"
					doc:name="Logger" />
			</otherwise>
		</choice>
	</flow>
	
	<flow name="updateMessageValidationFlow">
		<set-payload value="#[flowVars['originalPayload']]"
			doc:name="Set Payload" />
		<message-filter onUnaccepted="invalidParameterFlow"
			doc:name="Message">
			<and-filter doc:name="And">
				<expression-filter expression="#[originalPayload['token'] != null]" />
				<expression-filter expression="#[originalPayload['messageID'] != null]"/>
			</and-filter>
		</message-filter>

		<flow-ref name="tokenValidationFlow" doc:name="Flow Reference" />
		<choice doc:name="Choice">
			<when expression="#[payload.status.message == 'SUCCESS']">
				<flow-ref name="updateMessageBPFlow" doc:name="Flow Reference" />
			</when>
			<otherwise>
				<logger level="INFO" message="[MESSAGE NOT FOUND = #[payload]]"
					doc:name="Logger" />
			</otherwise>
		</choice>
	</flow>
</mule>
